@page "/Weather"

@using BlazorServer.Models
@using BlazorServer.Data

@inject WeatherServices Service

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
    <MudText Typo="Typo.h3" GutterBottom="true">Weather forecast</MudText>
    <MudText Class="mb-8">This component demonstrates fetching data from the server.</MudText>
    @if (_weathers == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudTable Items="_weathers" Hover="true" SortLabel="Sort By" Elevation="0">
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<WeatherDay, object>(x=>x.WeatherId)">Id</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<WeatherDay, object>(x => x.DateTime)">Date</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<WeatherDay, object>(x => x.Temperature)">Temp. (C)</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Summary">@context.WeatherId</MudTd>
                <MudTd DataLabel="Date">@context.DateTime</MudTd>
                <MudTd DataLabel="Temp. (C)">@context.Temperature</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{10, 20}" />
            </PagerContent>
        </MudTable>
    }
</MudContainer>

@code {

    List<WeatherDay> _weathers = new List<WeatherDay>();

    protected override async Task OnInitializedAsync()
    {
        await RefreshWeathers();
    }

    private async Task RefreshWeathers()
    {
        _weathers = await Service.GetWeatherAsync();
    }


    public WeatherDay NewWeatherDay { get; set; } = new WeatherDay();

    private async Task AddNewWeather()
    {
        NewWeatherDay.DateTime = DateTime.Now;
        await Service.AddWeatherAsync(NewWeatherDay);
        NewWeatherDay = new WeatherDay();
        await RefreshWeathers();
    }

    WeatherDay _updateWeatherDay = new WeatherDay();
    private void SetWeatherForUpdate(WeatherDay weatherDay)
    {
        _updateWeatherDay = weatherDay;
    }

    private async Task UpdateWeatherData()
    {
        await Service.UpdateWeatherAsync(_updateWeatherDay);
        await RefreshWeathers();
    }

    private async Task DeleteWeather(WeatherDay weatherDay)
    {
        await Service.DeleteWeatherAsync(weatherDay);
        await RefreshWeathers();
    }
}