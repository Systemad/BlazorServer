@page "/fetchdata"

@inject MudBlazor.ISnackbar snackBar

@using BlazorServer.Models
@using BlazorServer.Data
@inject WeatherService weatherService

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Weather</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="WeatherDay.Temperature" Label="Temperature" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save Weather</MudButton>
    </MudCardContent>
</MudCard>
<br />
<MudTable Elevation="25" Items="GetWeathers()" Filter="new Func<WeatherDay, bool>(Search)" @bind-weather="WeatherDay">
    <ToolBarContent>
        <MudText Typo="Typo.h6">WeatherDays</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for weather..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>First Name</MudTh>
        <MudTh>Last Name</MudTh>
        <MudTh>Phone Number</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.WeatherId</MudTd>
        <MudTd DataLabel="LastName">@context.Temperature</MudTd>
        <MudTd DataLabel="PhoneNumber">@context.DateTime</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.WeatherId))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context.WeatherId))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
</MudTable>

@code{
    private string searchString = "";
    private WeatherDay WeatherDay = new WeatherDay();
    private List<WeatherDay> WeatherDays = new List<WeatherDay>();
    protected override async Task OnInitializedAsync()
    {
        GetWeathers();
    }
    private List<WeatherDay> GetWeathers()
    {
        WeatherDays = weatherService.GetWeathers();
        return WeatherDays;
    }
    private bool Search(WeatherDay weatherDay)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (weatherDay.WeatherId.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || weatherDay.Temperature.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }
    private void Save()
    {
        weatherService.SaveWeather(WeatherDay);
        WeatherDay = new WeatherDay();
        snackBar.Add("WeatherDay Saved.", Severity.Success);
        GetWeathers();
    }
    private void Edit(int id)
    {
        WeatherDay = WeatherDays.FirstOrDefault(c => c.WeatherId == id);
    }
    private void Delete(int id)
    {
        weatherService.DeleteWeather(id);
        snackBar.Add("WeatherDay Deleted.", Severity.Success);
        GetWeathers();
    }
}